#!/usr/bin/env python
#记录一些总结、个人理解

本书讲解对象的思路：
从对象的类型-->操作符-->内建函数-->内建方法-->相关模块，逐步深入分析。

python对象：
（三个特性身份，类型，值）
1、内建标准（基础）数据类型
（全称：基本内建数据对象原始类型，也叫做“基础数据类型”，Python内建的基本数据类型）
    数字
    整型
    长整型
    浮点型
    布尔型
    复数型
    字符串
    列表
    元组
    字典

2、其他内建数据类型
    类型
    Null对象（None）
    文件
    集合/固定集合
    函数/方法
    类
    模块

3、内部类型（一般不会和这些对象打交道）
    代码
    帧
    跟
记录
    切片
    省略
    Xrange

数据类型的讲解纲要：
1、数据类型
    见python对象
2、操作符
    算数运算
    逻辑运算
    位运算
3、内建函数
4、内建方法
5、相关模块


标准数据类型的分类模型：
1、存储模型
2、更新模型
3、访问模型


条件语句：if
循环语句: while,for
    条件循环
    迭代循环
循环语句相关语句：break，continue
pass语句


func(positional_args, keyword_args, *tuple_grp_nonkw_args, **dict_grp_kw_args)


类：对象的定义
实例：真正的实物，存放类中所定义的对象的具体信息
方法：类的功能

python使用类的方法（功能），加工对象，然后产生实例？
class MyDataWithMethod(object): #定义类
    def printFoo(self):         #定义方法
        print 'You invoked printFoo()!'
muObj = MyDataWithMethod()      #创建实例
myObj.printFoo()                #调用方法

class AddrBookEntry(object):    #类定义（创建一个类）
    'address bool entry class'
    def __int__(self, nm, ph):  #定义构造器
        self.name = nm          #设置name
        self.phone = ph         #设置phone
        print 'Created instance for:', self.name
    def updatePhone(self, newph):   #定义方法
        self.phone = newph
        print 'Update phone# for:', self.name

内建函数属性：
bif.__doc__ 文档字符串（或None）
bif.__name__ 字符串类型的文档名字
bif.__self__ 设置为None（保留给内建方法）
bif.__module__ 存放bif定义的模块名字（或None）

class C(object): #定义类
    def foo(self): pass #定义非对象方法

c = C() #实例化
type(C) #类的类别
type(c) #实例的类别
type(C.foo) #非绑定方法的类别
type(c.foo) #绑定方法的类别
C.foo #非绑定方法对象
c.foo #绑定方法对象
c #foo()实例被绑定到...

